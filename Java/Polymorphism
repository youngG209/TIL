# 다형성 (Polymorphism)

## 다형성의 개념

- 하나의 객체가 여러 가지 타입을 가질 수 있는 것을 의미
- 자바에서는 부모 클래스 타입의 참조 변수로 자식 클래스 타입의 인스턴스를 참조할 수 있도록 하여 구현하고 있음
- 상속, 추상화와 더불어 객체 지향 프로그래밍을 구성하는 중요한 특징 중 하나임

### 참조 변수의 다형성

- 참조 변수가 사용할 수 있는 멤버의 개수가 실제 인스턴스의 멤버 개수보다 같거나 적어야 참조할 수 있음

        예제
            class Parent { ...... }
            class Child extends Parent { ...... }

            ...
            
            Parent pa = new Parent(); // 허용
            Child ch = new Child(); // 허용
            Parent pa = new Child(); // 허용
            Child ch = new Perent(); // 오류 발생

        이유
            보모 클래스 타입의 참조 변수로도 자식 클래스 타입의 인스턴스를 참조할 수 있음
            참조 변수가 사용할 수 있는 멤버의 개수가 실제 인스턴스의 멤버 개수보다 적기 때문

            반대의 경우인 자식 클래스 타입의 참조 변수로는 부모 클래스 타입의 인스턴스를 참조할 수 없음.
            참조 변수가 사용할 수 있는 멤버의 개수가 실제 인스턴스의 멤버 개수보다 많기 때문

            ->  클래스는 상속을 통해 확장될 수는 있어도 축소될 수는 없으므로, 
                자식 클래스에서 사용할 수 있는 멤버의 개수가 언제나 부모 클래스와 같거나 많게 됨

### 참조 변수의 타입 변환

1. 서로 상속 관계에 있는 클래스 사이에만 타입 변환을 할 수 있음
2. 자식 클래스 타입에서 부모 클래스 타입으로 타입 변환은 생략할 수 있음
3. 하지만 부모 클래스 타입에서 자식 클래스 타입으로의 타입 변환은 반드시 명시해야 함

- 참조 변수의 타입 변환도 기본 타입의 타입 변환과 마찬가지로 타입 캐스트 연산자( () )를 사용함

        문법
            (변환할 타입의 클래스 이름) 변환할 참조 변수

        예제
            class Parent { ...... }
            class Child extends Parent { ...... }
            class Brother extends Parent { ...... }

            ...
            
            Parent pa01 = null;
            Child ch = new Child();
            Parent pa02 = new Perent();
            Brother br = null;

            pa01 = ch;            // pa01 = (Parent)ch; 와 같음, 해당 경우 타입 변환을 생략할 수 있음.
            br = (Brother)pa02;   // 타입 변환 생략 불가
            br = (Brother)ch;     // 직접적인 상속 관계가 아니므로, 오류 발생

### instanceof 연산자

- 참조 변수가 참조하고 있는 인스턴스의 실제 타입을 확인할 수 있도록 해줌

        문법
            참조변수 instanceof 클래스이름

        설명
            왼쪽에 전달된 참조 변수가 실제로 참조하고 있는 인스턴스의 타입이 
            오른쪽에 전달된 클래스 타입이면 true를 반환, 아니면 false를 반환
            만약 참조 변수가 null을 가리키고 있으면 false를 반환

        예제
            class Parent { }
            class Child extends Parent { }
            class Brother extends Parent { }

            public class Polymorphism01 {
                public static void main(String[] args) {
                    Parent p = new Parent();
                    System.out.println( p instanceof Object );
                    System.out.println( p instanceof Parent );
                    System.out.println( p instanceof Child );
                    System.out.println();

                    Parent p = new Child(); // 자식 클래스 타입 참조 가능
                    System.out.println( p instanceof Object );
                    System.out.println( p instanceof Parent );
                    System.out.println( p instanceof Child );

        실행 결과
            true
            true
            false
  
            true
            true
            true
               

## 추상 메소드 & 추상 클래스

### 추상 메소드 ( Abstract Method )

- 자식 클래스에서 반드시 오버라이딩해야만 사용할 수 있는 메소드를 의미함
- 추상 메소드가 포함된 클래스를 상속받는 자식 클래스가 반드시 추상 메소드를 구현하도록 하기 위함
- 선언부만 존재, 구현부는 작성되어 있지 않음 -> 해당 구현부를 자식 클래스에서 오버라이딩하여 사용하는 것

      문법
          abstract 반환타입 메소드이름 ();

#### ** 추상 메소드의 사용 목적

- 추상 메소드가 포함된 클래스를 상속 받는 자식 클래스가 반드시 추상 메소드를 구현하도록 하기 위함
- 일반 메소드로 구현한다면 사용자에 따라 해당 메소드를 구현할 수도 있고, 안할 수도 있음.
- but, 추상 메소드가 포함된 추상 클래스를 상속 받은 모든 자식 클래스는 추상 메소드를 구현해야만 인스턴스를 생성할 수 있으므로, 반드시 구현하게 됨

### 추상 클래스 ( Abstract Class )

- 하나 이상의 추상 메소드를 포함하는 클래스를 가리킴
- 객체 지향 프로그래밍에서 중요한 특징인 다형성을 가지는 메소드의 집합을 정의할 수 있도록 해줌
- 반드시 사용되어야 하는 메소드를 추상 클래스에 추상 메소드로 선언해 놓으면, 이 클래스를 상속받는 모든 클래스에서는 이 추상 메소드를 반드시 재정의 해야 함
- 동작이 정의 되어 있지 않은 추상 메소드를 포함하고 있음, 인스턴스 생성 불가
- 상속을 통해 자식 클래스를 만들고, 만든 자식 클래스에서 추상 클래스의 모든 추상 메소드를 오버라이딩하고 나서야 자식 클래스의 인스턴스를 생성할 수 있게 됨
- 추상 메소드를 포함하고 있다는 점을 제외하면, 일반 클래스와 모든 점이 같음 -> 생성자와 필드, 일반 메소드도 포함할 수 있음.

      문법
          abstract class 클래스이름 {
              ......
              
              abstract 반환타입 메소드이름 ();
  
              ......
          }

      예제
          abstract class Animal { abstract void cry(); }
          class Cat extends Animal { void cry() { System.out.println("냐옹냐옹!"); } }
          class Dog extends Animal { void cry() { System.out.println("멍멍!"); } }

          public class Polymorphism02 {
              public static void main(String[] args) {
                  // Animal a = new Animal(); // 추상 클래스는 인스턴스 생성할 수 없음
                  Cat c = new Cat();
                  Dog d = new Dog();

                  c.cry();
                  d.cry();
              }
          }

      실행 결과
          냐옹냐옹!
          멍멍!

      설명
          추상클래스인 Animal 클래스는 추상 메소드인 cry() 메소드를 가지고 있음
          Animal 클래스를 상속받는 자식 클래스인 Dog 클래스와 Cat 클래스는 cry() 메소드를 오버라이딩해야만 비로소 인스턴스를 생성할 수 있음