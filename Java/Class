# 클래스 (Class)

## 클래스 개념

- 객체를 정의하는 틀 또는 설계도
- 객체의 상태를 나타내는 필드(field)와 객체의 행동을 나타내는 메소드(method)로 구성

    - 필드(field) : 클래스에 포함된 변수(variable)를 의미
    - 메소드(method) : 어떠한 특정 작업을 수행하기 위한 명령문의 집합
    
### 인스턴스(Instance)

- 클래스를 사용하기 위해 해당 클래스 타입의 객체(object)를 선언해야 함, 
  이러한 클래스로부터 객체를 선언하는 과정을 클래스의 인스턴스 화라고 함
  
- 선언된 해당 클래스 타입의 객체를 인스턴스라고 함, 즉 인스턴스란 메모리에 할당된 객체를 의미
- 하나의 클래스로부터 여러 개의 인스턴스를 생성할 수 있음
- 생성된 인스턴스는 독립된 메모리 공간에 저장된 자신만의 필드를 가질 수 있으나 
  해당 클래스의 모든 메소드는 해당 클래스에서 생성된 모든 인스턴스가 공유되게 됨
    
    
    예시
        클래스
            - 차(car) : 설계도
        필드
            - car.modelName = "람보르기니"
            - car.modelYear = 2021
            - car.color = "주황색"
            - car.maxSpeed = 350
        메소드
            -car.accelerate()
            -car.brake()
        인스턴스
            - 내 차(myCar) : 설계도에 의해 생산된 차량
            - 친구 차(friendCar) : 설계도에 의해 생산된 또다른 차량
        
        -> 자동차 인스턴스는 모두 위와 같은 필드와 메소드를 가지게 될 것이지만
           각 인스턴스마다 가지고 있는 프로퍼티의 값은 전부 다를 것

### 필드(Field)

- 클래스에 포함된 변수(variable)를 의미

1. 클래스 변수 (static variable)
2. 인스턴스 변수 (instance variable)
3. 지역 변수 (local variable)


    예제
        class Car {        
            static int modelOutput; // 클래스 변수        
            String modelName;       // 인스턴스 변수        
                
            void method() {        
                int something = 10; // 지역 변수        
            }        
        }


### 메소드(Method)

- 어떠한 특정 작업을 수행하기 위한 명령문의 집합
- 하나의 클래스에 같은 이름의 메소드를 둘 이상 정의할 수 없으나 메소드 오버로딩(Overloading)을 이용하면 같은 이름의 메소드를 중복하여 정의 가능

    - 메소드 오버로딩 : 매개변수의 개수나 타입을 다르게 하여 같은 이름의 또다른 메소드를 작성하는 것 (ex. void print(); void print(int a); ...)


    문법
        접근제어자 반환타입 메소드이름(매개변수목록) { // 선언부
            // 구현부
        }

1. 접근 제어자 : 해당 매소드에 접근할 수 있는 범위 명시
2. 반환 타입 (return type) : 메소드가 모든 작업을 마치고 반환하는 데이터의 타입을 명시
3. 메소드 이름 : 메소드를 호출하기 위한 이름을 명시
4. 매개변수 목록 (parameters) : 메소드 호출 시에 전달되는 인수의 값을 저장할 변수들을 명시
5. 구현부 : 메소드의 고유 기능을 수행하는 명령문의 집합


### 생성자 (Constructor)

- 객체 생성과 동시에 인스턴스 변수를 원하는 값으로 초기화 할 수 있는 생성자라는 메소드를 제공
- 생성자 이름은 해당 클래스의 이름과 같아야 함 (ex. class Car{ Car() {} })