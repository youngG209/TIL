# String 클래스

## charAt() 메소드

- 해당 문자열의 특정 인덱스에 해당하는 문자를 반환함
- 해당 문자열의 길이보다 큰 인덱스나 음수를 전달하면, IndexOutOfBoundsException 오류가 발생함

        예제
            String str = new String("Java");
            System.out.println("원본 문자열 : " + str);
                
            for (int i = 0; i < str.lenght(); i++) {
                System.out.print(str.charAt(i) + ", ");
            }

            System.out.println("\n charAt() 메소드 호출 후 원본 문자열 : " + str);

        실행 결과
            원본 문자열 : Java
            J, a, v, a
            charAt() 메소드 호출 후 원본 문자열 : Java

## compareTo() 메소드

- 해당 문자열을 인수로 전달된 문자열과 사전 편찬 순으로 비교함
- 문자열을 비교할 때 대소문자를 구분하여 비교함 -> 대소문자 구문하지 않기를 원한다면, compareToIgnoreCase() 메소드 사용하면 됨
- 만약 두 문자열이 같다면 0을 반환하며, 해당 문자열이 인수로 전달된 문자열보다 작으면 음수를, 크면 양수를 반환함

        예제
            String str = new String("abcd");            
            System.out.println("원본 문자열 : " + str);
            
            System.out.println(str.compareTo("bcef"));            
            System.out.println(str.compareTo("abcd") + "\n");
            
            System.out.println(str.compareTo("Abcd"));            
            System.out.println(str.compareToIgnoreCase("Abcd"));            
            System.out.println("compareTo() 메소드 호출 후 원본 문자열 : " + str);

        실행 결과
            원본 문자열 : abcd            
            -1            
            0            
            32            
            0            
            compareTo() 메소드 호출 후 원본 문자열 : abcd

## concat() 메소드

- 해당 문자열의 뒤에 인수로 전달된 문자열을 추가한 새로운 문자열을 반환함
- 인수로 전달된 문자열의 길이가 0이면, 해당 문자열을 그대로 반환함

        예제
            String str = new String("Java");        
            System.out.println("원본 문자열 : " + str);
            
            System.out.println(str.concat("수업"));
            System.out.println("concat() 메소드 호출 후 원본 문자열 : " + str);
        
        실행 결과
            원본 문자열 : Java        
            Java수업        
            concat() 메소드 호출 후 원본 문자열 : Java

## indexOf() 메소드

- 해당 문자열에서 특정 문자나 문자열이 처음으로 등장하는 위치의 인덱스를 반환함
- 해당 문자열에 전달된 문자나 문자열이 포함되어 있지 않으면 <i style="color : red;">-1</i>을 반환함
- 문자나 문자열을 찾을 때 대소문자를 구분함

        예제
            String str = new String("Oracle Java");            
            System.out.println("원본 문자열 : " + str);
            
            System.out.println(str.indexOf('o'));            
            System.out.println(str.indexOf('a'));            
            System.out.println(str.indexOf("Java"));            
            System.out.println("indexOf() 메소드 호출 후 원본 문자열 : " + str);
        
        실행 결과
            원본 문자열 : Oracle Java            
            -1                          // 소문자 'o'가 없음
            2            
            7            
            indexOf() 메소드 호출 후 원본 문자열 : Oracle Java

## trim() 메소드

- 해당 문자열의 맨 앞과 맨 뒤에 포함된 모든 공백 문자를 제거해 줌

        예제
            String str = new String(" Java     ");            
            System.out.println("원본 문자열 : " + str);
            
            System.out.println(str + '|');            
            System.out.println(str.trim() + '|');            
            System.out.println("trim() 메소드 호출 후 원본 문자열 : " + str);
        
        실행 결과
            원본 문자열 :  Java
            Java        |
            Java|               // trim() 으로 공백 제거
            trim() 메소드 호출 후 원본 문자열 :  Java

## toLowerCase() 와 toUpperCase() 메소드

- toLowerCase() : 해당 문자열의 모든 문자를 소문자로 변환시켜 줌
- toUpperCase() : 해당 문자열의 모든 문자를 대문자로 변환시켜 줌

        예제
        String str = new String("Java");        
        System.out.println("원본 문자열 : " + str);
        
        System.out.println(str.toLowerCase());        
        System.out.println(str.toUpperCase());        
        System.out.println("두 메소드 호출 후 원본 문자열 : " + str);
        
        실행 결과
            원본 문자열 : Java        
            java        
            JAVA        
            두 메소드 호출 후 원본 문자열 : Java

## String 메소드 표

| 메소드 | 설명
|----|-----
| char charAt(int index) | 해당 문자열의 특정 인덱스에 해당하는 문자를 반환함
| int compareTo(String str) | 해당 문자열을 인수로 전달된 문자열과 사전 편찬 순으로 비교함
| int compareToIgnoreCase(String str) | 해당 문자열을 인수로 전달된 문자열과 대소문자를 구분하지 않고 사전  편찬 순으로 비교함
| String concat(String str) | 해당 문자열의 뒤에 인수로 전달된 문자열을 추가한 새로운 문자열을 반환함
| int indexOf(int ch) <br/> int indexOf(String str) | 해당 문자열에서 특정 문자나 문자열이 처음으로 등장하는 위치의 인덱스를 반환함
| int indexOf(int ch, int fromIndex) <br/> int indexOf(String str, int fromIndex) | 해당 문자열에서 특정 문자나 문자열이 전달된 인덱스 이후에 처음으로 등장하는 위치의 인덱스를 반환함
| int lastIndexOf(int ch) | 해당 문자열에서 특정 문자가 마자막으로 등장하는 위치의 인덱스를 반환함
| int lastIndexOf(int ch, int fromIndex) | 해당 문자열에서 특정 문자가 전달된 인덱스 이후에 마지막으로 등장하는 위치의 인덱스를 반환함
| String[] split(String regex) | 해당 문자열을 전달된 정규식(regular expression)에 따라 나눠서 반환함
| String substring(int beginIndex) | 해당 문자열의 전달된 인덱스부터 끝까지를 새로운 문자열로 반환함
| String substring(int begin, int end) | 해당 문자열의 전달된 시작 인덱스부터 마지막 인덱스까지를 새로운 문자열로 반환함
| String toLowerCase() | 해당 문자열의 모든 문자를 소문자로 반환함
| String toUpperCase() | 해당 문자열의 모든 문자를 대문자로 반환함
| String trim() | 해당 문자열의 맨 앞과 맨 뒤에 포함된 모든 공백 문자를 제거함
| length() | 해당 문자열의 길이를 반환함
| isEmpty() | 해당 문자열의 길이가 0이면 true를 반환하고, 아니면 false를 반환함