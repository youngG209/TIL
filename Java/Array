# 배열 (Array)
    - 같은 타입의 변수들로 이루어진 유한 집합
    - 배열을 구성하는 각각의 값을 배열 요소(Element)라 함
    - 배열에서의 위치를 가리키슷 숫자를 인덱스(Index)라 함, 
      인덱스는 언제나 0부터 시작, 0을 포함한 양의 정수만 가질 수 있음

## 1차월 배열

- 배열은 모두 객체이므로, 각가의 배열은 모두 자신만의 필드와 메소드를 가지고 있음
- 배열의 길이는 해당 배열이 몇 개의 배열 요소를 가지게 되는지 명시함
- 배열의 길이를 초과하는 인덱스를 사용하면 ArrayIndexOutOfBounds 예외가 발생함

        문법
            1. 타입[] 배열이름; // BEST
            2. 타입 배열이름[];
    
        예제
            int[] grade1 = new int[3]; // 사이즈가 3인 int형 배열의 선언 및 생성
            int[] grade2 = new int[3];
            
            grade1[0] = 85; // 인텍스를 이용한 배열의 초기화
            grade1[1] = 65;
            grade1[2] = 90;
        
            grade2[0] = 85; 배열의 길이보다 적은 수의 배열 요소만 초기화
            
            for (int i = 0; i < grade1.length; i++) {
                System.out.print(grade1[i] + ", "); // 인덱스를 이용한 배열로의 접근
            }
        
            for (int i = 0; i < grade2.length; i++) {
                System.out.print(grade2[i] + ", ");
            }
        
            System.out.print(grade2[4]); // grade2 배열 사이즈를 초과하는 인덱스를 사용하여 ArrayIndexOutOfBounds 예외 발생
    
        실행결과
            85, 65, 90
            85, 0, 0 // grade2의 경우 사이즈를 3으로 선언하였으므로 초기화 된 값을 제외한 기본 값 출력

| 배열의 타입 | 초기 값
|----|---------
| char | '\u0000'
| byte, short, int | 0
| long | 0L
| float | 0.0F
| double | 0.0 or 0.0D
| boolean | false
| 배열, 인스턴스 등 | null

### 배열의 초기화

- 자바에서는 변수와 마찬가지로 배열도 선언과 동시에 초기화 가능
- 괄호( {} )를 사용하여 초기 값을 나열한 것을 초기화 블록이라 함 -> 해당 블록을 이용하여 배열의 선언과 동기에 초기화 가능
    
        문법
            1. 타입[] 배열이름 = {배열요소1, 배열요소2, ...};
            2. 타입[] 배열이름 = new 타입[]{배열요소1, 배열요소2, ...};
                i.  배열의 선언과 초기화를 따로 진행해야 할 경우
                ii. 메소드의 인수로 배열을 전달하면서 초기화해야 할 경우
    
        예제
            int[] grade1 = {70, 90, 80};            // 배열의 선언과 동시에 초기화 할 수 있음
            int[] grade2 = new int[]{70, 90, 80};   // 배열의 선언과 동시에 초기화 할 수 있음
            int[] grade3;                           
            // grade3 = {70, 90, 80};               // 이미 선언된 배열의 경우 해당 방법으로 초기화 불가
            int[] grade4;                           
            grade4 = new int[]{70, 90, 80};         // 선언 후 초기화를 위해 2번 방법으로 초기화


## 다차원 배열 (Multi-Dimensional Array) 

- 2차원 이상의 배열을 의미 함, 배열 요소로 또 다른 배열을 가지는 배열을 의미

### 2차원 배열

- 배열 요소로 1차원 배열을 가지는 배열

        문법
            1. 타입[][] 배열이름;
            2. 타입 배열이름[][];
            3. 타입[] 배열이름[];
    
        예제
            int[][] arr = new int[2][3];
        
            int k = 10;
            for (int i = 0; i < arr.length; i++) {
                for (int j = 0; j < arr[i].length; j++) {
                    arr[i][j] = k; //인덱스를 이용하여 초기화
                    k += 10;
                }
            }
        
            for (int i = 0; i < arr.length; i++) {
                for (int j = 0; j < arr[i].length; j++) {
                    Systemj.out.print(arr[i][j] + ", ");
                }
                System.out.println();
        }
    
        실행 결과
            10, 20, 30
            40, 50, 60

- 해당 예제에서 사용되 arr는 2차원 배열, arr[i]는 arr의 각 배열 요소로 1차원 배열이 됨
- So, arr.length는 2차원 배열인 arr의 배열 요소의 총 갯수를 반환하며, arr[i].length는 arr의 각 배열 요소인 1차원 배열이 가지고 있는 배열 요소의 총 갯수를 반환함


### 배열의 선언과 동시에 초기화 하는 방법

- 차원 배열과 마찬가지로 2차원 배열도 선언과 동시에 초기화 가능

        문법
        타입 배열이름[열 길이][행 길이] = {
            {배열요소[0][0], 배열요소[0][1], ...},
            {배열요소[1][0], 배열요소[1][1], ...},
            {배열요소[2][0], 배열요소[2][1], ...},
            ......
        };

        예제
        int[][] arr = {
            {10, 20, 30},
            {40, 50, 60}

        실행 결과
          10, 20, 30
          40, 50, 60


### 가변 배열 (Dynamic Array)

- 배열을 생성할 대 배열 크키 생략하면 가변 배열

        예제
            1.
                int[][] arr = new int[3][];        
                arr[0] = new int[2];        
                arr[1] = new int[4];        
                arr[2] = new int[1];
  
            2.
                int[][] arr = {
                    {10, 20},            
                    {10, 20, 30, 40},            
                    {10}            
                };

