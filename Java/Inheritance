# 상속 (Inheritance)

## 상속(inheritance)이란?

- 기존 클래스에 기능을 추가하거나 재정의 하여 새로운 클래스를 정의하는 것을 의미
- 캡슐화, 추상화와 더불어 객체 지향 프로그래밍을 구성하는 중요한 특징 중 하나
- 기존에 정의되어 있는 클래스의 모든 필드와 메소드를 물려받아, 새로운 클래스를 생성할 수 있음
- 기존에 정의되어 있는 클래스 : 부모 클래스 or 상위 클래스  or 기초 클래스
- 새로운 클래스 : 자식 클래스 or 하위 클래스 or 파생 클래스

## 상속의 장점
1. 기존에 작성된 클래스를 재활용할 수 있음
2. 자식 클래스 설계 시 중복되는 멤버를 미리 부모 클래스에 작성해 놓으면, 자식 클래스에서는 해당 멤버를 작성하지 않아도 됨
3. 클래스 간의 계층적 관계를 구성함으로써 다형성의 문법적 토대를 마련함

## 자식 클래스 (Child Class)

- 부모 클래스의 모든 특성을 물려받아 새롭게 작성된 클래스를 의미함
- 부모 클래스의 필드와 메소드만이 상속되며, 생성자와 초기화 블록은 상속되지 않음
- 부모 클래스의 접근 제어가 private이나 default로 설정된 멤버는 자식 클래스에서 상속받지만 접근할 수는 없음
- 자바에서 클래스는 단 한 개의 클래스만을 상속받는 단일 상속만 가능

        문법
            class 자식클래스이름 extend 부모클래스이름 {
                .....
            }

        예제
            class Parent {
                private int a = 10; // private 필드
                public int b = 20; // public 필드
            }
  
            class Child extends Parent {
                public int c = 30; // public 필드
                void display() {
                    // System.out.println(a); //    부모 클래스의 private 필드 접근 불가 -> 오류 발생
                    System.out.println(b); //       부모 클래스의 public 필드 상속 받으므로 가능
                    System.out.println(c); //       자식 클랫스에서 자신만의 필드 or 메소드를 선언하여 사용 가능   
                }
            }


## super 키워드

- 부모 클래스로부터 상속받은 필드나 메소드를 자식 클래스에서 참조하는데 사용하는 참조 변수
- 인스턴스 변수의 이름과 지역 변수의 이름이 같을 경우 인스턴스 변수 앞에 this 키워드를 사용하여 구분할 수 있음
- 부모 클래스의 멤버와 자식 클래스의 멤버 이름이 같을 경우 super 키워드를 사용하여 구별할 수 있음
- this와 마찬가지로 super 참조 변수를 사용할 수 있는 대상도 인스턴스 메소드 뿐이며, 클래스 메소드에서는 사용할 수 없음


      예제 1
        class Parent { int a = 10; }
        
        class Child extends Parent {
          void display() {
            System.out.println(a);
            System.out.println(this.a);
            System.out.println(super.a);
          }
        }

        public class Inheritance02 {
          public static void main(String[] args) {
            Child ch = new Child();
            ch.display();
          }
        }

      실행 결과
        10
        10
        10
      
      이유
        int 형 변수 num은 부모 클래스인 Parent 클래스에서만 선언 되어있으므로 지역변수와 this 참조 변수, super 참조 변수 모두 같은 값 출력

      예제 2
        class Parent { int a = 10; }
        
        class Child extends Parent {
          int a = 20;

          void display() {
            System.out.println(a);
            System.out.println(this.a);
            System.out.println(super.a);
          }
        }

        public class Inheritance02 {
          public static void main(String[] args) {
            Child ch = new Child();
            ch.display();
          }
        }

      실행 결과
        20
        20
        10
      
      이유
        int 형 변수 num은 자식 클래스인 Child 클래스에도 선언 되어있으므로 지역변수와 this 참조 변수는 자식 클래스에서 대입된 값을 출력, 
        super 참조 변수만 부모클래스에서 대입한 값 출력

## super() 메소드

- super() 메소드는 부모 클래스의 생성자를 호출할 때 사용 / this() 메소드는 같은 클래스의 다른 생성자를 호출할 때 사용
- 자식 클래스의 인스턴스를 생성하면, 해당 인스턴스에는 자식 클래스의 고유 멤버뿐만 아니라 



      예제 
        class Parent {
            int a;        
            Parent() { a = 10; }        
            Parent(int n) { a = n; }        
        }        
        
        class Child extends Parent {        
            int b;        
            Child() {        
                super();        
                b = 20;        
            }
      
      이유
        부모 클래스인 Parent 클래스에는 기본 생성자가 추가되어 있지 않기 때문
        따라서 매개변수를 가지는 생성자를 선언해야 할 경우에는 되도록이면 다음 예제처럼 기본 생성자까지 명시적으로 선언하는 것이 좋음

## 메소드 오버라이딩

- 상속 관계에 있는 부모 클래스에서 이미 정의된 메소드를 자식 클래스에서 같은 시크니쳐를 갖는 메소드로 다시 정의하는 것
- 자식 클래스는 부모 클래스의 private 멤버를 제외한 모든 메소드를 상속 받음
- 상속받은 부모 클래스의 메소드를 재정의하여 사용함

### 오버라이딩의 조건

1. 메소드의 동작만을 재정의하는 것이므로, 메소드의 선언부는 기존 메소드와 완전히 같아야 함, but 메소드의 반환 타입은 부모 클래스의 반환 타입으로 타입 변환할 수 있는 타입이라면 변경 가능
2. 부모 클래스의 메소드보다 접근 제어자를 더 좁은 범위로 변경할 수 없음
3. 부모 클래스의 메소드보다 더 큰 범위의 예외를 선언할 수 없음

### 메소드 오버라이딩 예제

    예제
      class Parent {      
          void display() { System.out.println("부모 클래스의 display() 메소드입니다."); }      
      }      
      class Child extends Parent {      
          void display() { System.out.println("자식 클래스의 display() 메소드입니다."); }      
      }
            
      public class Inheritance05 {      
          public static void main(String[] args) {      
              Parent pa = new Parent();      
              pa.display();      
              Child ch = new Child();      
              ch.display();      
              Parent pc = new Child();      
              pc.display(); // Child cp = new Parent();      
          }      
      }

    실행 결과
      부모 클래스의 display() 메소드입니다.
      자식 클래스의 display() 메소드입니다.
      자식 클래스의 display() 메소드입니다.

    이유
      세 번째와 같은 인스턴스의 참조가 허용되는 이유는 자바의 다형성 때문


### 오버로딩과 오버라이딩

- 오버로딩 (overloading) : 새로운 메소드를 정의하는 것
- 오버라이딩 (overriding) : 상속받은 기존의 메소드를 재정의 하는 것


    예제
      // 부모 클래스인 Parent 클래스의 display() 메소드를 자식 클래스인 Child 클래스에서 오버라이딩과 오버로딩을 둘 다 수행하는 예제

      class Parent {
          void display() { System.out.println("부모 클래스의 display() 메소드입니다.");
      }
      class Child extends Parent {
          void display() { System.out.println("자식 클래스의 display() 메소드입니다.");
          void display(String str) { System.out.println(str); } //오버로딩된 display() 메소드
      }

      public class Inheritance06 {
          public static void main(String[] args) {     
              Child ch = new Child();      
              ch.display();      
              ch.display("오버로딩된 display() 메소드입니다.");      
          }
      }
          
    실행 결과
      자식 클래스의 display() 메소드입니다.
      오버로딩된 display() 메소드입니다.