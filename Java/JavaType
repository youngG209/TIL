# 변수와 상수, 리터럴

## 변수 (variable) 란?
- 테이터를 저장할 수 있는 메모리 공간, 저장된 값은 변경될 수 있음

### 변수의 종류
1. 기본형(primitive type) : 실제 연산에 사용되는 변수
    1. 정수형 : byte, short, int, long
    2. 실수형 : float, double
    3. 문자형 : char
    4. 논리형 : boolean
2. 참조형(reference type) : 8개의 기본형 변수를 사용하여 사용작다 직접 만들어 사용하는 변수

### 변수 선언
변수를 사용하시 전에 변수를 선언하고 초기화
1. 변수의 선언만 : 변수 선언하여 메모리 공간 할당, Not Good
2. 변수의 선언과 동시에 초기화 : 선언과 동시에 변수 할당하여 초기값 세팅, Good

   ```java
   int num; // 변수만 선언
   System.out.println(num); // 오류 발생 초기값 없음
   num = 0; // 변수 초기화
   System.out.println(num); //0   
   ```
   ** 같은 타입의 데이터만 저장

## 상수 (constant) 란?
- 변수와 동일하게 데이터를 저장할 수 있는 메모리 공간을 의미
- But, 상수는 프로그램이 실행되는 동안 메모리에 저장된 데이터를 변경할 수 없다!
- 반드시 초기화해야함
- Java에서는 final를 사용하여 선언
   ```java
   final int AGE = 30;
   ```
** 상수의 이름은 일반적으로 모두 대문자를 사용하여 선언, 여러단어로 이루어진 이름의 경우 언더스코어(_)로 구분


## 리터럴 (Literal) 란?
- 데이터 그 자체
- 변수와 상수와는 달리 데이터가 저장된 메모리 공간을 가리키는 이름을 가지고 있지 않음
   ```java
   int num = 30 // 30이 리터럴
   final int AGE = 100; // 100이 리터럴
  ```

### 타입에 따른 리터럴
1. 정수형 리터럴(Integer Literals) : 123, -456과 같은 아라비아 숫자와 부호로 직접 표현 됨
2. 실수형 리터럴(floating-point Literals) : 2.14, -45.6과 같은 소수 부분을 가지는 아라비아 숫자
3. 논리형 리터럴(boolean Literals) : true, false로 표현
4. 문자형 리터럴(character Literals) : 'A', 'z'와 같이 작은따옴표('')로 감싸진 문자
5. 문자열 리터럴(String Literals) : "Apple"과 같이 큰따옴표("")로 감싸진 문자열
5. null 리터럴(null Literals) : null인 경우
   ** null이란 아무런 값도 가지고 있지 않은 빈 값을 의미

### 리터럴 타입 접미사 (Literal Type Suffix)
* 자바에서 3.14와 같은 실수형 리터럴을 그냥 사용할 경우 실수형 타입 중 double형으로 인식
* 실수형 리터럴 뒤에 접미사인 F, f를 추가하면 float형으로 인식

| 타입접미사 | 리터럴 타입 | 예제
|-----------|------------|-------------
| L 또는 l | long 형 |12345L, 6789l ...
| F 또는 f | float 형 | 1.2345F, 67.89f ...
| D 또는 d ( 생략 가능) | double 형 | 1.2345D, 67.89d ...

## 기본 타입
- 데이터가 메모리에 어떻게 저장되고, 어떻게 처리되어야 하는지를 <span style="color:red"><u>**명시적**</u></span>으로 알려주는 역활
- 자바에서는 여러 형태의 타입을 미리 정의하여 제공

1. 정수형 타입

| 정수형 타입 | 할당되는 메모리의 크기
|-----------|------------
| byte	| 1 바이트
| short | 2 바이트
| int | 4 바이트
| long | 8 바이트 
* 정수형 데이터 타입을 선택할 시 반드시 <span style="color:red"><u>**데이터의 최대, 최소 크기**</u></span>를 고려해야 함, 벗어날 경우 오버플로우 (overflow) 발생
* 오버플로우 란? : 해당 타입이 표현할 수 있는 최대 범위보다 <span style="color:red"><u>**큰 수**</u></span>를 저장할 때 발생하는 현상을 의미
* 언더플로우 란? 해당 타입이 표현할 수 있는 최소 범위보다 <span style="color:red"><u>**작은 수**</u></span>를 저장할 때 발생하는 현상을 의미

2. 실수형 타입

| 실수형 타입 | 할당되는 메모리의 크기 | 유효 자릿수
|-----------|------------|----------
| float	| 4 바이트 | 소수 부분 6자리까지 오차없이 표현할 수 있음
| double | 8 바이트 | 소수 부분 15자리까지 오차없이 표현할 수 있음
* 실수형 데이터의 타입을 결정할 때 반드시 <span style="color:red"><u>**유효 자릿 수**</u></span>를 고려해야 함

3. 문자형 타입
   
| 문자형 타입 | 할당되는 메모리의 크기 | 데이터의 표현 범위
|-----------|------------|--------
| char	| 2 바이트 | 0 ~ 2^16 (65,536)
* 자바에서는 <span style="color:red"><u>**유니코드**</u></span>(unicode)를 사용하여 문자를 표현
* 유니코드는 문자를 16비트로 표현, 총 65,536개의 문자 표현 가능함

4. 논리형 타입

| 문자형 타입 | 할당되는 메모리의 크기 | 데이터의 표현 범위
|-----------|------------|--------
| boolean	| 1 바이트 | true or false
* boolean형의 기본값은 false


